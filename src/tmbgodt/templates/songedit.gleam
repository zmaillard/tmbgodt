// DO NOT EDIT: Code generated by matcha from songedit.matcha

import gleam/list
import gleam/string_builder.{type StringBuilder}

import gleam/int
import tmbgodt/album.{type Album}
import tmbgodt/day
import tmbgodt/models/songedit.{type SongEdit}

pub fn render_builder(song_edit song_edit: SongEdit) -> StringBuilder {
  let builder = string_builder.from_string("")
  let builder =
    string_builder.append(
      builder,
      "
",
    )
  let builder =
    string_builder.append(
      builder,
      "
    <tr hx-target=\"this\" hx-swap=\"outerHTML\" class=\"bg-white border-b dark:bg-gray-800 dark:border-gray-700\">
    <form hx-put=\"/admin/song/",
    )
  let builder = string_builder.append(builder, int.to_string(song_edit.song.id))
  let builder =
    string_builder.append(
      builder,
      "/edit\" >
        <th scope=\"row\" class=\"px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white\">",
    )
  let builder =
    string_builder.append(builder, day.to_day_string(song_edit.song.day))
  let builder =
    string_builder.append(
      builder,
      "</th>
        <td class=\"px-6 py-4\"><input type=\"text\" name=\"song\" value=\"",
    )
  let builder = string_builder.append(builder, song_edit.song.name)
  let builder =
    string_builder.append(
      builder,
      "\"></td>
        <td class=\"px-6 py-4\">
        <select id=\"album\" name=\"album\" class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\">
          ",
    )
  let builder =
    list.fold(song_edit.albums, builder, fn(builder, album: Album) {
      let builder =
        string_builder.append(
          builder,
          "

          ",
        )
      let builder = case album.name == song_edit.song.album_name {
        True -> {
          let builder =
            string_builder.append(
              builder,
              "
          <option selected value=",
            )
          let builder = string_builder.append(builder, int.to_string(album.id))
          let builder = string_builder.append(builder, ">")
          let builder = string_builder.append(builder, album.name)
          let builder =
            string_builder.append(
              builder,
              "</option>
            ",
            )

          builder
        }
        False -> {
          let builder =
            string_builder.append(
              builder,
              "
          <option value=",
            )
          let builder = string_builder.append(builder, int.to_string(album.id))
          let builder = string_builder.append(builder, ">")
          let builder = string_builder.append(builder, album.name)
          let builder =
            string_builder.append(
              builder,
              "</option>
            ",
            )

          builder
        }
      }
      let builder =
        string_builder.append(
          builder,
          "
          ",
        )

      builder
    })
  let builder =
    string_builder.append(
      builder,
      "
        </select>
        </td>
        <td class=\"px-6 py-4\">",
    )
  let builder =
    string_builder.append(builder, int.to_string(song_edit.song.year))
  let builder =
    string_builder.append(
      builder,
      "</td>
        <td scope=\"col\" class=\"px-6 py-3\">
        <button class=\"btn\">Save</button>
        <button hx-get=\"/admin/song/",
    )
  let builder = string_builder.append(builder, int.to_string(song_edit.song.id))
  let builder =
    string_builder.append(
      builder,
      "\">Cancel</button>
        </td>
</form>
    </tr>
",
    )

  builder
}

pub fn render(song_edit song_edit: SongEdit) -> String {
  string_builder.to_string(render_builder(song_edit: song_edit))
}
