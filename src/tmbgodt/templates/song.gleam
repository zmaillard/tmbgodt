// DO NOT EDIT: Code generated by matcha from song.matcha

import gleam/list
import gleam/string_builder.{type StringBuilder}

import gleam/int
import tmbgodt/day
import tmbgodt/models/songs.{type Songs}
import tmbgodt/song.{type Song}

pub fn render_builder(songs songs: Songs) -> StringBuilder {
  let builder = string_builder.from_string("")
  let builder =
    string_builder.append(
      builder,
      "
",
    )
  let builder =
    string_builder.append(
      builder,
      "


<div class=\"relative overflow-x-auto\">
    <table class=\"w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400\">
        <thead class=\"text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400\">
        <tr>
          <th scope=\"col\" class=\"px-6 py-3\">Day</th>
          <th scope=\"col\" class=\"px-6 py-3\">Song</th>
          <th scope=\"col\" class=\"px-6 py-3\">Album</th>
          <th scope=\"col\" class=\"px-6 py-3\">Year</th>
            ",
    )
  let builder = case songs.is_authenticated {
    True -> {
      let builder =
        string_builder.append(
          builder,
          "
          <th scope=\"col\" class=\"px-6 py-3\">Action</th>
            ",
        )

      builder
    }
    False -> {
      builder
    }
  }
  let builder =
    string_builder.append(
      builder,
      "
        </tr>
    </thead>
    <tbody>
    ",
    )
  let builder =
    list.fold(songs.songs, builder, fn(builder, song: Song) {
      let builder =
        string_builder.append(
          builder,
          "
     <tr hx-target=\"this\" hx-swap=\"outerHTML\" class=\"bg-white border-b dark:bg-gray-800 dark:border-gray-700\">
        <th scope=\"row\" class=\"px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white\">",
        )
      let builder = string_builder.append(builder, day.to_day_string(song.day))
      let builder =
        string_builder.append(
          builder,
          "</th>
        <td class=\"px-6 py-4\">",
        )
      let builder = string_builder.append(builder, song.name)
      let builder =
        string_builder.append(
          builder,
          "</td>
        <td class=\"px-6 py-4\">",
        )
      let builder = string_builder.append(builder, song.album_name)
      let builder =
        string_builder.append(
          builder,
          "</td>
        <td class=\"px-6 py-4\">",
        )
      let builder = string_builder.append(builder, int.to_string(song.year))
      let builder =
        string_builder.append(
          builder,
          "</td>
        ",
        )
      let builder = case songs.is_authenticated {
        True -> {
          let builder =
            string_builder.append(
              builder,
              "
          <td scope=\"col\" class=\"px-6 py-3\"><button hx-get=\"/admin/song/",
            )
          let builder = string_builder.append(builder, int.to_string(song.id))
          let builder =
            string_builder.append(
              builder,
              "/edit\">Edit</button></td>
        ",
            )

          builder
        }
        False -> {
          builder
        }
      }
      let builder =
        string_builder.append(
          builder,
          "
    </tr>
    ",
        )

      builder
    })
  let builder =
    string_builder.append(
      builder,
      "
    </tbody>
</table>
</div>
",
    )

  builder
}

pub fn render(songs songs: Songs) -> String {
  string_builder.to_string(render_builder(songs: songs))
}
